horacio.estevez@gmail.com



http://alumni.education

http://educacionit.com/tualua


Node.JS : Entorno de desarrollo I/O Asincronico

NPM : Node Package Manager

npm {install|i} <tipo> <paquete>

tipo : 

    --save|-S           Paquetes de produccion
    --save-dev|-D       Paquetes de desarrollo
    -g                  Paquetes globales

> npm i -g create-react-app
> create-react-app <proyecto>
> cd <proyecto>
> npm start 


1 - Siempre tiene que estar la variable React en scope
2 - Todos los componentes de react son funciones en mayuscula que retornan otro React.Component , DOMElement  ó String : 

    function App(){ return "Hola Mundo" }
    let App = () => { return "Hola Mundo" }
    class App {}

3 - Un componente ejecutado se escribe en forma JSX : 

        App()   ===    <App/>




4- Los componentes solo pueden retornan una sola cosa. Si tengo multiple retorno de elementos los puedo agregar adentro de una etiqueta HTML 
5 - Una funcion de tipo Class siempre extiende a React.Component
6 - Una clase, para retornar, necesita estar adentro del metodo ciclo de vida "render"
7 - Un componente de tipo clase puede tener estado(state) el cual es creado en su constructor. Este estado puede ser compartido a todos sus componentes hijos. Cada vez que el estado cambia, este y todos los componentes que lo usen, van a volver a ejecutar su método render. 
8 - Cualquier componente de react puede recibir parametros(props) de solo lectura, usualmente son el state de un componente padre y se escriben en JSX como atributos de HTML : 

    <App required />    ===   App({required:true})
    <App test="hola" /> ===   App({test:"hola"})
    <App fn={()=>{}} /> ===   App({fn:()=>{}})

9 - El estado de un componente no puede ser modificado por asignacion de variable sino a través de this.setState({}) , en donde describimos como debería verse el próximo estado de la aplicación




CICLOS DE VIDA DE UN COMPONENTE : Los métodos de cada ciclo de vida son funciones de clase preestablecidas en React y solo funcionan para componentes de tipo clase, no para componentes funcionales. Se separan en tres grupos : 

- mount :
    constructor : inicio del componente. Aca creamos el estado, bindeamos metodos y/o hacemos cualquier configuracion extra 

    componentWillMount : 

    render : UI del componente en JSX

    componentDidMount : Subscripciones a APIs REST y/o DB


- update : 
    shouldComponentUpdate : Dado que cada componente se actualiza por cambios de props, recepción de props y/o cambio de estado, este método es ideal para cuando recibimos nuevos props que son iguales a los que ya teniamos. Siempre tiene que retornar true o false. 

    render 


- unmount
    componentWillUnmount : opuesto componentDidMount. Removes eventos, timers y subscripciones. 



https://es.reactjs.org/docs/react-component.html





REDUX : Es una libreria para implementar el patron de Pub/Sub en cualquier aplicación de JS. Se separa en dos : redux y react-redux , siendo la ultima la que nos permite conectar redux  con una aplicación de React. 

Store : Es analogo al state de un componente pero este no se crea directo sino que con un reducer.

Reducer : Es una funcion pura que toma dos parametros : el estado inicial de la aplicación(o anterior) y el action que se está despachando. El reducer tiene que switchear en base a la acción y retornar el nuevo estado de la aplicación. 

Action : Es una funcion pura que puede vivir en cualquier archivo. No necesitamos nada para crearla pero si es obligacion : 

    1 - Que haya retorno de tipo Object
    2 - Toda operacion entre el inicio del stack al retorno sea sincronica 

Usualmente el objeto que retorna un action suele tener como minimo la propiedad "type". 




npm i -S redux react-redux 

REDUX
1) Crear en algun archivo un store : Para eso necesitamos la funcion createStore de "redux". Esta toma como parametro un reducer 
2) Crear en algun archivo un reducer : Para eso no necesitamos nada, solo exportar una funcion que tome dos parametros y siempre retorne algo dentro de un switch



REACT REDUX


    Conectar la app con redux

    1) Incluir la parte de la aplicación que nos interesa conectar a redux con el componente Provider de "react-redux"
    
    2) Pasarle como prop al Provider el store 






    Conectar componentes individuales con el store


    Consumir el store : necesitamos la funcion connect de "react-redux", ejecutarla y pasarle el componente que queremos conectar. Ademas usamos el primer parametro de connect el cual es una funcion. Esta funcion recibe una copia del store y lo que retorne, va a formar parte de los props del componente que estemos conectando. 

    Despachar una acción : necesitamos la funcion connect de "react-redux", ejecutarla y pasarle el componente que queremos conectar. Ademas usamos el segundo parametro de connect el cual es una funcion. Esta funcion recibe una copia de la funcion para despachar(llamada dispatch) y lo que retorne, va a formar parte de los props del componente que estemos conectando. 
    Creo todas las acciones que necesito en algun lugar y las importo en el componente donde estoy trabajando. Fusiono mi propia accion con la funcion de dispatch utilizando "bindActionCreators" de "redux". 

    


https://tinyurl.com/y5cwoj8y














/*******************************************/

let app = function (){}
let app = () => {}


let app = function (){ return "hola" }
let app = () => { return "hola" }
let app = () => "hola" 




SENTENCIAS : No necesariamente dan retorno (if/else/forEach/for/for...in)

let foo = if(condicion){return true }else{return false}
let arr = [1,2,3]
let nuevo_array = []

arr.forEach(([elemento,indice,lista])=>{
    nuevo_array.push(elemento+1)
})

EXPRESIONES : Obligatoriamente da retorno(operador ternario)

let foo = condicion ? true : false

let arr = [1,2,3]
let nuevo_array = arr.map((e,i,a)=>{
    return e + 1
})
let nuevo_array = arr.map((e)=> e + 1)
let nuevo_array = arr.map(e=> e + 1)





DESTRUCTURING : 

let arr = [1,2,3,4]
let [uno,dos,tres,cuatro] = arr

let uno = arr[0]
let dos = arr[1]
let tres = arr[2]
let cuatro = arr[3]

let obj = {x:1,y:2,z:3}
let {x:x,y:y,z:z} = obj
//OBJECT SHORTHAND
let {x,y,z} = obj

let x = obj.x
let y = obj.y
let z = obj.z






CONTEXTO : Hace referencia al objeto que contiene a la funcion, por lo general y esta en la palabra reservada "this".  No es estatico, es decir que puede cambiar dependiendo la ejecucion o el programador. 
//window.foo = function foo(){}
//var foo = function foo(){}
function foo(){
    console.log(this)
}

foo() // window{}



let obj = {
    x : 1 , 
    fn : function(){
        console.log(this)
        window.setTimeout(()=>{
            console.log(this)
        },0)
    }
}

obj.fn() // obj{}







//CALL - APPLY - BIND - NEW 
function ctx(a,b){
    console.log(a,b)
    console.log(this)
}

ctx(1,2) //1 2 window{}
ctx.call({x:1},1,2) //1 2 {x:1}
ctx.apply({x:1},[1,2]) //1 2 {x:1}
let otra_fn = ctx.bind({x:1})

otra_fn()
ctx()



PUBSUB - Observer 



https://tinyurl.com/y5ay4zt2

https://github.com/rus0000/jsinheritance

https://github.com/HoracioGutierrez/react-accenture

https://www.youtube.com/watch?v=PMfcsYzj-9M

SOURCE DECODED 
https://www.youtube.com/channel/UCl0hPcsUmeld49qmWWSQKOg/videos

